service: meliora-backend2
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  profile: joana
  region: eu-north-1
  stage: dev

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-plugin-optimize


package:
  individually: true
  

custom:
  imageUploadBucket: meliora-images-bucket
  optimizer: 
    memorySize: 500

functions:  
    getcategories:
        handler: handlers/CategoriesHandler/GetCategories.getCategories
        events: 
          - http:
              path: /categories
              method: get
              cors: true
    
    getCategoryById:
        handler: handlers/CategoriesHandler/GetCategoryById.getCategoryById
        events: 
          - http:
              path: /categories/{id}
              method: get
              cors: true
    
    creteCategory:
        handler: handlers/CategoriesHandler/CreateCategory.createCategory
        events:
          - http:
              path: /post-category
              method: post
              cors: true

    updateCategory:
        handler: handlers/CategoriesHandler/UpdateCategory.updateCategory
        events:
          - http:
              path: /update-category/{id}
              method: put
              cors: true
    
    deletecategory:
        handler: handlers/CategoriesHandler/DeleteCategory.deleteCategory
        events:
          - http:
              path: /delete-category/{id}
              method: delete
              cors: true
    #Products
    getAllProducts:
        handler: handlers/ProductsHandler/GetAllProducts.getAllProducts
        events:
          - http: 
              path: /products
              method: get
              cors: true

    getProductById:
        handler: handlers/ProductsHandler/GetProductById.getProductById
        events:
          - http:
              path: /products/{id}
              method: get
              cors: true
    
    createProduct:
        handler: handlers/ProductsHandler/CreateProduct.createProduct
        events:
          - http:
              path: /create-product
              method: post
              cors: true

    deleteProduct:
        handler: handlers/ProductsHandler/DeleteProduct.deleteProduct
        events: 
          - http:
              path: /delete-product/{id}
              method: delete
              cors: true
    
    updateProduct:
        handler: handlers/ProductsHandler/UpdateProduct.updateProduct
        events:
          - http:
              path: /update-product/{id}
              method: put
              cors: true

    #Customers
    getAllCustomers:
        handler: handlers/CustomersHandler/GetCustomers.getCustomers
        events:
          - http:
              path: /customers
              method: get
              cors: true
          
    createCustomer:
        handler: handlers/CustomersHandler/CreateCustomer.createCustomer
        events:
          - http:
              path: /create-customer
              method: post
              cors: true
    
    deleteCustomer: 
        handler: handlers/CustomersHandler/DeleteCustomer.deleteCustomer
        events:
          - http:
              path: /delete-customer/{id}
              method: delete
              cors: true

    updateCustomer: 
        handler: handlers/CustomersHandler/UpdateCustomer.updateCustomer
        events: 
          - http: 
              path: /update-customer/{id}
              method: put
              cors: true
        
    getCustomerById: 
        handler: handlers/CustomersHandler/GetCustomerById.getCustomerById
        events: 
          - http:
              path: /customer/{id}
              method: get
              cors: true
        
    uploadImage:
        handler: handlers/ProductsHandler/UploadImage.uploadImage
        events:
          - http:
              path: /upload-image
              method: post
              cors: true
    
    deleteImage:
        handler: handlers/ProductsHandler/DeleteImageFromS3.deleteObjectFromS3
        events:
          - http:
              path: /delete-image/{key}
              method: delete
              cors: true

resources:
  Resources:
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
    
    CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          UserPoolName: ${self:provider.stage}-user-pool
          UsernameAttributes:
            - email
          AutoVerifiedAttributes:
            - email
    CognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: ${self:provider.stage}-user-pool-client
          UserPoolId:
            Ref: CognitoUserPool
          ExplicitAuthFlows:
            - ADMIN_NO_SRP_AUTH
          GenerateSecret: false

